2020-08-21 19:47:57,483-INFO -Core     : ----- STARTING ----- {core.py > main > 119}
2020-08-21 19:47:57,484-DEBUG-Core     : Debugging started {core.py > main > 120}
2020-08-21 19:47:57,484-DEBUG-Core     : get_files(.) {core.py > get_files > 82}
2020-08-21 19:47:57,484-DEBUG-Core     : get_files(.\data) {core.py > get_files > 82}
2020-08-21 19:47:57,485-DEBUG-Core     : [] {core.py > get_files > 100}
2020-08-21 19:47:57,485-DEBUG-Core     : get_files(.\logs) {core.py > get_files > 82}
2020-08-21 19:47:57,500-DEBUG-Core     : ['.\\logs\\debug.log', '.\\logs\\debug.txt', '.\\logs\\info.txt'] {core.py > get_files > 100}
2020-08-21 19:47:57,501-DEBUG-Core     : get_files(.\VideoCapture) {core.py > get_files > 82}
2020-08-21 19:47:57,502-DEBUG-Core     : ['.\\VideoCapture\\face.py', '.\\VideoCapture\\haarcascade_eye.xml', '.\\VideoCapture\\haarcascade_frontalface_default.xml'] {core.py > get_files > 100}
2020-08-21 19:47:57,502-DEBUG-Core     : get_files(.\__pycache__) {core.py > get_files > 82}
2020-08-21 19:47:57,503-DEBUG-Core     : Binary file:  .\__pycache__\config.cpython-38.pyc {core.py > get_files > 93}
2020-08-21 19:47:57,504-DEBUG-Core     : [] {core.py > get_files > 100}
2020-08-21 19:47:57,504-DEBUG-Core     : ['.\\config.py', '.\\core.py', '.\\logs\\debug.log', '.\\logs\\debug.txt', '.\\logs\\info.txt', '.\\main.py', '.\\temp.py', '.\\test.py', '.\\todo.txt', '.\\VideoCapture\\face.py', '.\\VideoCapture\\haarcascade_eye.xml', '.\\VideoCapture\\haarcascade_frontalface_default.xml'] {core.py > get_files > 100}
2020-08-21 19:47:57,504-DEBUG-Core     : FILES: ['.\\config.py', '.\\core.py', '.\\logs\\debug.log', '.\\logs\\debug.txt', '.\\logs\\info.txt', '.\\main.py', '.\\temp.py', '.\\test.py', '.\\todo.txt', '.\\VideoCapture\\face.py', '.\\VideoCapture\\haarcascade_eye.xml', '.\\VideoCapture\\haarcascade_frontalface_default.xml'] {core.py > get_lines > 65}
2020-08-21 19:47:57,504-DEBUG-Core     : <class 'list'> {core.py > get_lines > 66}
2020-08-21 19:47:57,504-DEBUG-Core     : list detected {core.py > get_lines > 69}
2020-08-21 19:47:57,522-INFO -Core     : todo:(.*)',\n", "    'fixme:(.*)',\n", "    '(.*):(.*)'\n", '    ]'] {core.py > main > 123}
2020-08-21 19:47:57,523-INFO -Core     : fixme:(.*)',\n", "    '(.*):(.*)'\n", '    ]'] {core.py > main > 123}
2020-08-21 19:47:57,523-INFO -Core     : ['import logging, sys, os, re, mimetypes\n', '\n', '""" -------------------- LOGGING & LOGGERS -------------------- """\n', '\n', "logger = logging.getLogger('')\n", 'logger.setLevel(logging.DEBUG)\n', "logger_format = '%(asctime)s-%(levelname)-5s-%(name)-8s :' \\\n", "                ' %(message)s'\n", '\n', 'debug_file_logger = logging.FileHandler(\n', "    filename='logs/debug.log', encoding='utf8', mode='w')\n", 'debug_file_logger.setLevel(logging.DEBUG)\n', 'debug_file_logger.setFormatter(logging.Formatter(\n', '                                logger_format +\n', "                                ' {%(filename)s >'\n", "                                ' %(funcName)s >'\n", "                                ' %(lineno)d}'))\n", 'logger.addHandler(debug_file_logger)\n', '\n', 'debug_file_logger_1 = logging.FileHandler(\n', "    filename='logs/debug.txt', encoding='utf8', mode='w')\n", 'debug_file_logger_1.setLevel(logging.DEBUG)\n', 'debug_file_logger_1.setFormatter(logging.Formatter(\n', '                                logger_format +\n', "                                ' {%(filename)s >'\n", "                                ' %(funcName)s >'\n", "                                ' %(lineno)d}'))\n", 'logger.addHandler(debug_file_logger_1)\n', '\n', 'debug_file_logger_2 = logging.FileHandler(\n', "    filename='logs/info.txt', encoding='utf8', mode='w')\n", 'debug_file_logger_2.setLevel(logging.INFO)\n', 'debug_file_logger_2.setFormatter(logging.Formatter(\n', '                                logger_format +\n', "                                ' {%(filename)s >'\n", "                                ' %(funcName)s >'\n", "                                ' %(lineno)d}'))\n", 'logger.addHandler(debug_file_logger_2)\n', '\n', 'debug_stream_logger = logging.StreamHandler()\n', 'debug_stream_logger.setLevel(logging.INFO)\n', 'debug_stream_logger.setFormatter(logging.Formatter(\n', '                                logger_format +\n', "                                ' {%(filename)s > %(lineno)d}'))\n", 'logger.addHandler(debug_stream_logger)\n', '\n', '\n', "# logging.basicConfig('logs/debug.log', filemode='a')\n", '\n', '""" -------------------- File Extentions -------------------- """\n', '# EXTENTIONS = [\n', "#     'txt', 'todo', 'fixme', 'chert',\n", "#     'py', 'html', 'php', 'js', 'jsx', 'ts', 'tsx'\n", '#     ]\n', '\n', "EXTENTIONS = ['txt', 'todo', 'log']\n", '\n', '""" -------------------- OS DETECTION -------------------- """\n', 'OS = sys.platform\n', '\n', '\n', '""" -------------------- PATTERNS -------------------- """\n', 'PATTERNS = [\n', "    'todo:(.*)',\n", "    'fixme:(.*)',\n", "    '(.*):(.*)'\n", '    ]'] {core.py > main > 123}
2020-08-21 19:47:57,573-INFO -Core     : ['# IN THE NAME OF GOD\n', 'from config import *\n', '\n', '""" -------------------- LOGGER -------------------- """\n', "core_logger = logging.getLogger('Core')\n", 'cl = core_logger\n', '\n', '\n', '""" -------------------- FUNCTIONS -------------------- """\n', '\n', '\n', 'def ext(file_name):\n', "    return file_name.split('.')[-1]\n", '\n', 'textchars = bytearray({7,8,9,10,12,13,27} | set(range(0x20, 0x100)) - {0x7f})\n', 'is_binary_string = lambda bytes: bool(bytes.translate(None, textchars))\n', '\n', '""" -------------------- PROCCESS -------------------- """\n', '# get OS\n', '\n', '# common functions ( linux = win )\n', '\n', '\n', '# for linux\n', '# get the list of directory and files\n', '# filter the files if they are binary\n', '# filter the files by extentions (.txt, .py, .html, ...) ( remove for example .png )\n', '# create a final list of filtered files\n', '# open files one by one and search inside them ( mine them :) )\n', '# show the result\n', '\n', '\n', '# for windows\n', '# get the list of directory and files\n', '# filter the files if they are binary\n', '# filter the files by extentions (.txt, .py, .html, ...) ( remove for example .png )\n', '# create a final list of filtered files\n', '# open files one by one and search inside them ( mine them :) )\n', '# show the result\n', '\n', '\n', '# Search file in linux and windowns\n', '\n', 'def search(lines, *, patterns=PATTERNS):\n', "    # cl.debug('STARTING THE SEARCH')\n", '    matches = []\n', '    count = 0\n', '    for line in lines:\n', '        if count >= 5:\n', '            return matches\n', "        # cl.debug('entering line: ')\n", '        for pattern in patterns:\n', "            # cl.debug('checking pattern: %s' % pattern)\n", '            match = re.search(pattern, str(line))\n', '            if match:\n', '                # cl.debug(match)\n', "                # cl.debug('match.group(0) = %s' % match.group(0))\n", '                # cl.debug(match)\n', '                matches.append(match.group(0))\n', '        count += 1\n', '    return matches\n', '\n', '\n', 'def get_lines(files):  \n', "    cl.debug('FILES: %s' % files)\n", '    cl.debug(type(files))\n', '    extracted = []\n', '    if type(files) is list:\n', "        cl.debug('list detected')\n", '        for file in files:\n', '            with open(file, \'r\', encoding="utf8") as File:\n', '                extracted.append(File.readlines())\n', '    else:\n', "        cl.debug('dict detected')\n", '        for value in files.values():\n', '            with open(value, \'r\', encoding="utf8") as File:\n', '                extracted.append(File.readlines())\n', '    return extracted\n', '\n', '\n', 'def get_files(path: str, *, hidden_folders=False, json=False, dictionary=False):  # maybe add hidden_files\n', "    cl.debug('get_files(%s)' % path)\n", '    file_list = os.listdir(path)\n', '    all_files = list()\n', '    for entry in file_list:\n', '        full_path = os.path.join(path, entry)\n', '        if os.path.isdir(full_path):\n', "            if entry[0] != '.':\n", '                all_files += get_files(full_path)\n', '        else:\n', "            with open(full_path, 'rb') as f:\n", '                if (is_binary_string(f.read(128))):\n', "                    cl.debug('Binary file:  %s' %full_path)\n", '                else:\n', '                    all_files.append(full_path)\n', "    if json or dictionary:  # convert the list to a dict {'dirpath': 'filename'}\n", '        cl.debug(all_files)  \n', '        return list_to_dict(all_files)\n', '    else:\n', '        cl.debug(all_files)\n', '        return all_files\n', '\n', '\n', 'def list_to_dict(array):\n', '    dictionary = dict()\n', '    for item in array:\n', "        if 'win' in OS:\n", "            value = item.split('\\\\')[-1]  # file name\n", '        else:\n', "            value = item.split('/')[-1]  # file name\n", '        key = item[:-len(value)]   # file path\n', '        dictionary[key] = value\n', "        print('key: ', key)\n", "        print('value: ', value)\n", '    return dictionary\n', '\n', '\n', 'def main():\n', "    cl.info('----- STARTING -----')\n", "    cl.debug('Debugging started')\n", "    matches = search(get_lines(get_files('.')))\n", '    for m in matches:\n', '        cl.info(m)# \n', '        # cl.info(match)\n', '\n', '\n', "if __name__ == '__main__':\n", '    main()\n', '\n'] {core.py > main > 123}
2020-08-21 19:47:57,683-INFO -Core     : ['2020-08-21 19:47:57,483-INFO -Core     : ----- STARTING ----- {core.py > main > 119}\n', '2020-08-21 19:47:57,484-DEBUG-Core     : Debugging started {core.py > main > 120}\n', '2020-08-21 19:47:57,484-DEBUG-Core     : get_files(.) {core.py > get_files > 82}\n', '2020-08-21 19:47:57,484-DEBUG-Core     : get_files(.\\data) {core.py > get_files > 82}\n', '2020-08-21 19:47:57,485-DEBUG-Core     : [] {core.py > get_files > 100}\n', '2020-08-21 19:47:57,485-DEBUG-Core     : get_files(.\\logs) {core.py > get_files > 82}\n', "2020-08-21 19:47:57,500-DEBUG-Core     : ['.\\\\logs\\\\debug.log', '.\\\\logs\\\\debug.txt', '.\\\\logs\\\\info.txt'] {core.py > get_files > 100}\n", '2020-08-21 19:47:57,501-DEBUG-Core     : get_files(.\\VideoCapture) {core.py > get_files > 82}\n', "2020-08-21 19:47:57,502-DEBUG-Core     : ['.\\\\VideoCapture\\\\face.py', '.\\\\VideoCapture\\\\haarcascade_eye.xml', '.\\\\VideoCapture\\\\haarcascade_frontalface_default.xml'] {core.py > get_files > 100}\n", '2020-08-21 19:47:57,502-DEBUG-Core     : get_files(.\\__pycache__) {core.py > get_files > 82}\n', '2020-08-21 19:47:57,503-DEBUG-Core     : Binary file:  .\\__pycache__\\config.cpython-38.pyc {core.py > get_files > 93}\n', '2020-08-21 19:47:57,504-DEBUG-Core     : [] {core.py > get_files > 100}\n', "2020-08-21 19:47:57,504-DEBUG-Core     : ['.\\\\config.py', '.\\\\core.py', '.\\\\logs\\\\debug.log', '.\\\\logs\\\\debug.txt', '.\\\\logs\\\\info.txt', '.\\\\main.py', '.\\\\temp.py', '.\\\\test.py', '.\\\\todo.txt', '.\\\\VideoCapture\\\\face.py', '.\\\\VideoCapture\\\\haarcascade_eye.xml', '.\\\\VideoCapture\\\\haarcascade_frontalface_default.xml'] {core.py > get_files > 100}\n", "2020-08-21 19:47:57,504-DEBUG-Core     : FILES: ['.\\\\config.py', '.\\\\core.py', '.\\\\logs\\\\debug.log', '.\\\\logs\\\\debug.txt', '.\\\\logs\\\\info.txt', '.\\\\main.py', '.\\\\temp.py', '.\\\\test.py', '.\\\\todo.txt', '.\\\\VideoCapture\\\\face.py', '.\\\\VideoCapture\\\\haarcascade_eye.xml', '.\\\\VideoCapture\\\\haarcascade_frontalface_default.xml'] {core.py > get_lines > 65}\n", "2020-08-21 19:47:57,504-DEBUG-Core     : <class 'list'> {core.py > get_lines > 66}\n", '2020-08-21 19:47:57,504-DEBUG-Core     : list detected {core.py > get_lines > 69}\n'] {core.py > main > 123}
2020-08-21 19:47:57,685-INFO -Core     : ['2020-08-21 19:47:57,483-INFO -Core     : ----- STARTING ----- {core.py > main > 119}\n', '2020-08-21 19:47:57,484-DEBUG-Core     : Debugging started {core.py > main > 120}\n', '2020-08-21 19:47:57,484-DEBUG-Core     : get_files(.) {core.py > get_files > 82}\n', '2020-08-21 19:47:57,484-DEBUG-Core     : get_files(.\\data) {core.py > get_files > 82}\n', '2020-08-21 19:47:57,485-DEBUG-Core     : [] {core.py > get_files > 100}\n', '2020-08-21 19:47:57,485-DEBUG-Core     : get_files(.\\logs) {core.py > get_files > 82}\n', "2020-08-21 19:47:57,500-DEBUG-Core     : ['.\\\\logs\\\\debug.log', '.\\\\logs\\\\debug.txt', '.\\\\logs\\\\info.txt'] {core.py > get_files > 100}\n", '2020-08-21 19:47:57,501-DEBUG-Core     : get_files(.\\VideoCapture) {core.py > get_files > 82}\n', "2020-08-21 19:47:57,502-DEBUG-Core     : ['.\\\\VideoCapture\\\\face.py', '.\\\\VideoCapture\\\\haarcascade_eye.xml', '.\\\\VideoCapture\\\\haarcascade_frontalface_default.xml'] {core.py > get_files > 100}\n", '2020-08-21 19:47:57,502-DEBUG-Core     : get_files(.\\__pycache__) {core.py > get_files > 82}\n', '2020-08-21 19:47:57,503-DEBUG-Core     : Binary file:  .\\__pycache__\\config.cpython-38.pyc {core.py > get_files > 93}\n', '2020-08-21 19:47:57,504-DEBUG-Core     : [] {core.py > get_files > 100}\n', "2020-08-21 19:47:57,504-DEBUG-Core     : ['.\\\\config.py', '.\\\\core.py', '.\\\\logs\\\\debug.log', '.\\\\logs\\\\debug.txt', '.\\\\logs\\\\info.txt', '.\\\\main.py', '.\\\\temp.py', '.\\\\test.py', '.\\\\todo.txt', '.\\\\VideoCapture\\\\face.py', '.\\\\VideoCapture\\\\haarcascade_eye.xml', '.\\\\VideoCapture\\\\haarcascade_frontalface_default.xml'] {core.py > get_files > 100}\n", "2020-08-21 19:47:57,504-DEBUG-Core     : FILES: ['.\\\\config.py', '.\\\\core.py', '.\\\\logs\\\\debug.log', '.\\\\logs\\\\debug.txt', '.\\\\logs\\\\info.txt', '.\\\\main.py', '.\\\\temp.py', '.\\\\test.py', '.\\\\todo.txt', '.\\\\VideoCapture\\\\face.py', '.\\\\VideoCapture\\\\haarcascade_eye.xml', '.\\\\VideoCapture\\\\haarcascade_frontalface_default.xml'] {core.py > get_lines > 65}\n", "2020-08-21 19:47:57,504-DEBUG-Core     : <class 'list'> {core.py > get_lines > 66}\n", '2020-08-21 19:47:57,504-DEBUG-Core     : list detected {core.py > get_lines > 69}\n'] {core.py > main > 123}
2020-08-21 19:47:57,688-INFO -Core     : ['2020-08-21 19:47:57,483-INFO -Core     : ----- STARTING ----- {core.py > main > 119}\n'] {core.py > main > 123}
